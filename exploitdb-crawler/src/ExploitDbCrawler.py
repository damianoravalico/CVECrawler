import logging
import os
import time
import requests
import xml.etree.ElementTree as ET


class ExploitDbCrawler:
    def __init__(self,
                 path_storage='/Users/dravalico/PycharmProjects/crawlers/exploitdb-crawler/data',
                 request_timeout=10,
                 update_interval=86400,
                 retry_interval=120):
        self.path_storage = path_storage
        self.request_timeout = request_timeout
        self.update_interval = update_interval
        self.retry_interval = retry_interval
        log_format = f'[%(levelname)s at %(asctime)s] %(message)s'
        logging.basicConfig(level=logging.INFO, format=log_format, datefmt="%Y-%m-%d %H:%M:%S")

    def run(self):
        if not os.path.exists(self.path_storage):
            os.makedirs(self.path_storage)
        endpoint_exploits = 'https://www.exploit-db.com/exploits/'
        while True:
            try:
                last_online_id = self.retrieve_last_edb_id_from_rss()
                last_local_id = self.retrieve_last_local_edb_id()
                for edb_id in range(last_local_id, last_online_id + 1):
                    pass
            except Exception as e:
                print(e)
                pass
            time.sleep(self.update_interval)

    def retrieve_last_edb_id_from_rss(self):
        rss_url = 'https://www.exploit-db.com/rss.xml'
        try:
            response = requests.get(rss_url, timeout=self.request_timeout)
            if response.status_code == 200:
                xml_data = ET.fromstring(response.content)
                return int(xml_data.find(".//guid").text.split('/')[-1])
            else:
                raise RuntimeError(f'Cannot retrieve rss feed. Status code: {response.status_code}')
        except:
            raise RuntimeError('Cannot retrieve rss feed')

    def retrieve_last_local_edb_id(self):
        filenames = []
        for root_folder, folders, files in os.walk(self.path_storage):
            for file in files:
                edb_id = os.path.join(root_folder, file)
                try:
                    edb_id = edb_id.replace('.json', '')
                    filenames.append(int(edb_id))
                except:
                    pass
        return max(filenames) if filenames != [] else 1
